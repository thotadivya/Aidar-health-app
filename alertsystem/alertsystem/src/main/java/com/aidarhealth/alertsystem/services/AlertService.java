package com.aidarhealth.alertsystem.services;

import com.aidarhealth.alertsystem.dto.PatientDataDTO;
import com.aidarhealth.alertsystem.exceptions.ResourceNotFoundException;
import com.aidarhealth.alertsystem.models.Alert;
import com.aidarhealth.alertsystem.models.Threshold;
import com.aidarhealth.alertsystem.repositories.AlertRepository;
import com.aidarhealth.alertsystem.repositories.ThresholdRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

@Service
public class AlertService {

    @Autowired
    private AlertRepository alertRepository;

    @Autowired
    private ThresholdRepository thresholdRepository;

	private PatientDataDTO latestMockData;
    public List<Alert> getAllAlerts() {
        return alertRepository.findAll(); // assuming alertRepository is your repository interface
    }
    

    
   

    // Method to process patient health data
    public List<Alert> processPatientData(PatientDataDTO patientData) {
        List<Alert> generatedAlerts = new ArrayList<>();
        this.latestMockData = patientData;
        // Fetch thresholds for the patient
        List<Threshold> thresholds = thresholdRepository.findByPatientId(patientData.getPatientId());

        if (!thresholds.isEmpty()) {
            Threshold threshold = thresholds.get(0); // Assuming one threshold per patient

            // Handle Heart Rate: Check if threshold values are not null and comparisons are correct
            if (threshold.getHeartRateMin() != null && patientData.getHeartRate() < threshold.getHeartRateMin()) {
                Alert heartRateAlert = new Alert(patientData.getPatientId(), "heartRate", patientData.getHeartRate());
                generatedAlerts.add(alertRepository.save(heartRateAlert));
            } else if (threshold.getHeartRateMax() != null && patientData.getHeartRate() > threshold.getHeartRateMax()) {
                Alert heartRateAlert = new Alert(patientData.getPatientId(), "heartRate", patientData.getHeartRate());
                generatedAlerts.add(alertRepository.save(heartRateAlert));
            }

            // Handle Blood Pressure: Check if threshold values are not null and comparisons are correct
            if (threshold.getBloodPressureMin() != null && patientData.getBloodPressure() < threshold.getBloodPressureMin()) {
                Alert bloodPressureAlert = new Alert(patientData.getPatientId(), "bloodPressure", patientData.getBloodPressure());
                generatedAlerts.add(alertRepository.save(bloodPressureAlert));
            } else if (threshold.getBloodPressureMax() != null && patientData.getBloodPressure() > threshold.getBloodPressureMax()) {
                Alert bloodPressureAlert = new Alert(patientData.getPatientId(), "bloodPressure", patientData.getBloodPressure());
                generatedAlerts.add(alertRepository.save(bloodPressureAlert));
            }

            // Handle Temperature: Check if threshold values are not null and comparisons are correct
            if (threshold.getTemperatureMin() != null && patientData.getTemperature() < threshold.getTemperatureMin()) {
                Alert temperatureAlert = new Alert(patientData.getPatientId(), "temperature", patientData.getTemperature());
                generatedAlerts.add(alertRepository.save(temperatureAlert));
            } else if (threshold.getTemperatureMax() != null && patientData.getTemperature() > threshold.getTemperatureMax()) {
                Alert temperatureAlert = new Alert(patientData.getPatientId(), "temperature", patientData.getTemperature());
                generatedAlerts.add(alertRepository.save(temperatureAlert));
            }

        } else {
            System.out.println("No thresholds found for patientId: " + patientData.getPatientId());
        }

        return generatedAlerts;
    }

 // Method to get the latest mock data
    public PatientDataDTO getLatestMockData() {
        return this.latestMockData; // Return the latest mock data generated by the simulator
    }

    // Get all unreviewed alerts for a patient
    public List<Alert> getUnreviewedAlerts(String patientId) {
        return alertRepository.findByPatientIdAndIsReviewedFalse(patientId);
    }
    public void markAlertAsReviewed(Long alertId) {
        Alert alert = alertRepository.findById(alertId).orElseThrow(() -> new ResourceNotFoundException("Alert not found"));
        alert.setIsReviewed(true);
        alertRepository.save(alert);
    }
}
